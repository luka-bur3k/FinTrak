(()=>{var e={56:e=>{"use strict";e.exports=JSON.parse('{"name":"dotenv","version":"16.5.0","description":"Loads environment variables from .env file","main":"lib/main.js","types":"lib/main.d.ts","exports":{".":{"types":"./lib/main.d.ts","require":"./lib/main.js","default":"./lib/main.js"},"./config":"./config.js","./config.js":"./config.js","./lib/env-options":"./lib/env-options.js","./lib/env-options.js":"./lib/env-options.js","./lib/cli-options":"./lib/cli-options.js","./lib/cli-options.js":"./lib/cli-options.js","./package.json":"./package.json"},"scripts":{"dts-check":"tsc --project tests/types/tsconfig.json","lint":"standard","pretest":"npm run lint && npm run dts-check","test":"tap run --allow-empty-coverage --disable-coverage --timeout=60000","test:coverage":"tap run --show-full-coverage --timeout=60000 --coverage-report=lcov","prerelease":"npm test","release":"standard-version"},"repository":{"type":"git","url":"git://github.com/motdotla/dotenv.git"},"homepage":"https://github.com/motdotla/dotenv#readme","funding":"https://dotenvx.com","keywords":["dotenv","env",".env","environment","variables","config","settings"],"readmeFilename":"README.md","license":"BSD-2-Clause","devDependencies":{"@types/node":"^18.11.3","decache":"^4.6.2","sinon":"^14.0.1","standard":"^17.0.0","standard-version":"^9.5.0","tap":"^19.2.0","typescript":"^4.8.4"},"engines":{"node":">=12"},"browser":{"fs":false}}')},857:e=>{"use strict";e.exports=require("os")},896:e=>{"use strict";e.exports=require("fs")},928:e=>{"use strict";e.exports=require("path")},982:e=>{"use strict";e.exports=require("crypto")},998:(e,t,o)=>{const n=o(896),r=o(928),s=o(857),i=o(982),a=o(56).version,c=/(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/gm;function l(e){console.log(`[dotenv@${a}][DEBUG] ${e}`)}function p(e){return e&&e.DOTENV_KEY&&e.DOTENV_KEY.length>0?e.DOTENV_KEY:process.env.DOTENV_KEY&&process.env.DOTENV_KEY.length>0?process.env.DOTENV_KEY:""}function u(e,t){let o;try{o=new URL(t)}catch(e){if("ERR_INVALID_URL"===e.code){const e=new Error("INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenvx.com/vault/.env.vault?environment=development");throw e.code="INVALID_DOTENV_KEY",e}throw e}const n=o.password;if(!n){const e=new Error("INVALID_DOTENV_KEY: Missing key part");throw e.code="INVALID_DOTENV_KEY",e}const r=o.searchParams.get("environment");if(!r){const e=new Error("INVALID_DOTENV_KEY: Missing environment part");throw e.code="INVALID_DOTENV_KEY",e}const s=`DOTENV_VAULT_${r.toUpperCase()}`,i=e.parsed[s];if(!i){const e=new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${s} in your .env.vault file.`);throw e.code="NOT_FOUND_DOTENV_ENVIRONMENT",e}return{ciphertext:i,key:n}}function d(e){let t=null;if(e&&e.path&&e.path.length>0)if(Array.isArray(e.path))for(const o of e.path)n.existsSync(o)&&(t=o.endsWith(".vault")?o:`${o}.vault`);else t=e.path.endsWith(".vault")?e.path:`${e.path}.vault`;else t=r.resolve(process.cwd(),".env.vault");return n.existsSync(t)?t:null}function f(e){return"~"===e[0]?r.join(s.homedir(),e.slice(1)):e}const g={configDotenv:function(e){const t=r.resolve(process.cwd(),".env");let o="utf8";const s=Boolean(e&&e.debug);e&&e.encoding?o=e.encoding:s&&l("No encoding is specified. UTF-8 is used by default");let i,a=[t];if(e&&e.path)if(Array.isArray(e.path)){a=[];for(const t of e.path)a.push(f(t))}else a=[f(e.path)];const c={};for(const t of a)try{const r=g.parse(n.readFileSync(t,{encoding:o}));g.populate(c,r,e)}catch(e){s&&l(`Failed to load ${t} ${e.message}`),i=e}let p=process.env;return e&&null!=e.processEnv&&(p=e.processEnv),g.populate(p,c,e),i?{parsed:c,error:i}:{parsed:c}},_configVault:function(e){Boolean(e&&e.debug)&&l("Loading env from encrypted .env.vault");const t=g._parseVault(e);let o=process.env;return e&&null!=e.processEnv&&(o=e.processEnv),g.populate(o,t,e),{parsed:t}},_parseVault:function(e){const t=d(e),o=g.configDotenv({path:t});if(!o.parsed){const e=new Error(`MISSING_DATA: Cannot parse ${t} for an unknown reason`);throw e.code="MISSING_DATA",e}const n=p(e).split(","),r=n.length;let s;for(let e=0;e<r;e++)try{const t=u(o,n[e].trim());s=g.decrypt(t.ciphertext,t.key);break}catch(t){if(e+1>=r)throw t}return g.parse(s)},config:function(e){if(0===p(e).length)return g.configDotenv(e);const t=d(e);return t?g._configVault(e):(o=`You set DOTENV_KEY but you are missing a .env.vault file at ${t}. Did you forget to build it?`,console.log(`[dotenv@${a}][WARN] ${o}`),g.configDotenv(e));var o},decrypt:function(e,t){const o=Buffer.from(t.slice(-64),"hex");let n=Buffer.from(e,"base64");const r=n.subarray(0,12),s=n.subarray(-16);n=n.subarray(12,-16);try{const e=i.createDecipheriv("aes-256-gcm",o,r);return e.setAuthTag(s),`${e.update(n)}${e.final()}`}catch(e){const t=e instanceof RangeError,o="Invalid key length"===e.message,n="Unsupported state or unable to authenticate data"===e.message;if(t||o){const e=new Error("INVALID_DOTENV_KEY: It must be 64 characters long (or more)");throw e.code="INVALID_DOTENV_KEY",e}if(n){const e=new Error("DECRYPTION_FAILED: Please check your DOTENV_KEY");throw e.code="DECRYPTION_FAILED",e}throw e}},parse:function(e){const t={};let o,n=e.toString();for(n=n.replace(/\r\n?/gm,"\n");null!=(o=c.exec(n));){const e=o[1];let n=o[2]||"";n=n.trim();const r=n[0];n=n.replace(/^(['"`])([\s\S]*)\1$/gm,"$2"),'"'===r&&(n=n.replace(/\\n/g,"\n"),n=n.replace(/\\r/g,"\r")),t[e]=n}return t},populate:function(e,t,o={}){const n=Boolean(o&&o.debug),r=Boolean(o&&o.override);if("object"!=typeof t){const e=new Error("OBJECT_REQUIRED: Please check the processEnv argument being passed to populate");throw e.code="OBJECT_REQUIRED",e}for(const o of Object.keys(t))Object.prototype.hasOwnProperty.call(e,o)?(!0===r&&(e[o]=t[o]),n&&l(!0===r?`"${o}" is already defined and WAS overwritten`:`"${o}" is already defined and was NOT overwritten`)):e[o]=t[o]}};e.exports.configDotenv=g.configDotenv,e.exports._configVault=g._configVault,e.exports._parseVault=g._parseVault,e.exports.config=g.config,e.exports.decrypt=g.decrypt,e.exports.parse=g.parse,e.exports.populate=g.populate,e.exports=g}},t={};function o(n){var r=t[n];if(void 0!==r)return r.exports;var s=t[n]={exports:{}};return e[n](s,s.exports,o),s.exports}o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";const e=require("electron");var t,n=o(928),r=o(896),s=o.n(r);!function(e){e[e.INFO=0]="INFO",e[e.ERROR=1]="ERROR",e[e.REQ=2]="REQ",e[e.WARNING=3]="WARNING",e[e.OTHER=4]="OTHER",e[e.DEBUG=5]="DEBUG"}(t||(t={}));const i=s().createWriteStream("output.log",{flags:"w"});console.log=(...e)=>{i.write(e.join(" ")+"\n"),process.stdout.write(e.join(" ")+"\n")},console.error=(...e)=>{i.write("[ERROR] "+e.join(" ")+"\n"),process.stderr.write(e.join(" ")+"\n")};class a{static logTypePrefix(e){switch(e){case t.INFO:return".";case t.ERROR:return"!";case t.REQ:return"--\x3e";case t.WARNING:return"#";case t.OTHER:return"*";case t.DEBUG:return"-"}return""}log(e,t,o=[]){console.log(`[${a.logTypePrefix(t)}] ${a.currentTimestamp()} | ${e}`,o)}logi(e){this.log(e,t.INFO)}loge(e,o=[]){this.log(e,t.ERROR,o)}logw(e){this.log(e,t.WARNING)}logd(e){this.log(e,t.DEBUG)}}a.currentTimestamp=()=>(new Date).toLocaleTimeString("en-GB",{hour12:!1});const c=new a;var l=o(998);o.n(l)().config();const p=()=>{const t=new e.BrowserWindow({width:1e3,height:700,webPreferences:{nodeIntegration:!1,contextIsolation:!0}});c.logi(`DIRNAME: ${__dirname}`),c.logi(`MODE: ${process.env.FINTRAK_MODE}`),"development"==process.env.FINTRAK_MODE?t.loadURL("http://localhost:3000"):"production"==process.env.FINTRAK_MODE&&t.loadFile(n.join(__dirname,"index.html")),t.webContents.openDevTools()};e.app.whenReady().then(p),e.app.on("window-all-closed",()=>{"darwin"!==process.platform&&e.app.quit()}),e.app.on("activate",()=>{0===e.BrowserWindow.getAllWindows().length&&p()})})()})();